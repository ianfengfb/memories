<% layout('layouts/boilerplate') %>

    <div id='map' class="mb-3" style='width: 100%; height: 300px;'></div>
    <div class="container">
        <div class="row">
            <% for (let memory of memories) { %>
                <div class="col-12 col-sm-2">
                    <div class="card mb-3 shadow hit-card" style="max-width: 540px;min-height: 350px;">
                        <div style="min-height: 300px;">
                            <img class="img-fluid" src="<%= memory.images[0].url %>" alt="">
                        </div>
                        <div class="card-body">
                            <h5 class="card-title">
                                <%= memory.date %>
                            </h5>
                            <div style="min-height: 4.5em;">
                                <h5 class="card-title">
                                    <%= memory.title %>
                                </h5>
                            </div>
                            <div style="min-height: 3em;">
                                <p class="card-text">
                                    <%= memory.description.slice(0, 30) + '...' %>
                                </p>
                            </div>
                            <hr>
                            <div style="min-height: 2.5em;">
                                <h6 class="text-muted">
                                    <%= memory.location %>
                                </h6>
                            </div>
                            <hr>
                            <a href="/memories/<%= memory._id %> " class="btn btn-primary">View Memory</a>
                        </div>
                    </div>
                </div>
                <% } %>
        </div>
    </div>



    <script>
        const mapToken = '<%- process.env.MAPBOX_TOKEN %>';
        const memories = { features: <%- JSON.stringify(memories) %> }


        //Map setting

        mapboxgl.accessToken = mapToken;
        const map = new mapboxgl.Map({
            container: 'map',
            style: 'mapbox://styles/mapbox/dark-v10',
            center: [87.6294, 5.8907],
            zoom: 1
        });
        map.addControl(new mapboxgl.NavigationControl());

        map.on('load', () => {
            // Add a new source from our GeoJSON data and
            // set the 'cluster' option to true. GL-JS will
            // add the point_count property to your source data.
            map.addSource('memories', {
                type: 'geojson',
                // Point to GeoJSON data. This example visualizes all M1.0+ memories
                // from 12/22/15 to 1/21/16 as logged by USGS' Earthquake hazards program.
                data: memories,
                cluster: true,
                clusterMaxZoom: 14, // Max zoom to cluster points on
                clusterRadius: 50 // Radius of each cluster when clustering points (defaults to 50)
            });

            map.addLayer({
                id: 'clusters',
                type: 'circle',
                source: 'memories',
                filter: ['has', 'point_count'],
                paint: {
                    // Use step expressions (https://docs.mapbox.com/mapbox-gl-js/style-spec/#expressions-step)
                    // with three steps to implement three types of circles:
                    //   * Blue, 20px circles when point count is less than 100
                    //   * Yellow, 30px circles when point count is between 100 and 750
                    //   * Pink, 40px circles when point count is greater than or equal to 750
                    'circle-color': [
                        'step',
                        ['get', 'point_count'],
                        '#00BCD4',
                        10,
                        '#2196F3',
                        30,
                        '#3F5185'
                    ],
                    'circle-radius': [
                        'step',
                        ['get', 'point_count'],
                        15,
                        10,
                        20,
                        30,
                        25
                    ]
                }
            });

            map.addLayer({
                id: 'cluster-count',
                type: 'symbol',
                source: 'memories',
                filter: ['has', 'point_count'],
                layout: {
                    'text-field': '{point_count_abbreviated}',
                    'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],
                    'text-size': 12
                }
            });

            map.addLayer({
                id: 'unclustered-point',
                type: 'circle',
                source: 'memories',
                filter: ['!', ['has', 'point_count']],
                paint: {
                    'circle-color': '#11b4da',
                    'circle-radius': 4,
                    'circle-stroke-width': 1,
                    'circle-stroke-color': '#fff'
                }
            });

            // inspect a cluster on click
            map.on('click', 'clusters', (e) => {
                const features = map.queryRenderedFeatures(e.point, {
                    layers: ['clusters']
                });
                const clusterId = features[0].properties.cluster_id;
                map.getSource('memories').getClusterExpansionZoom(
                    clusterId,
                    (err, zoom) => {
                        if (err) return;

                        map.easeTo({
                            center: features[0].geometry.coordinates,
                            zoom: zoom
                        });
                    }
                );
            });

            // When a click event occurs on a feature in
            // the unclustered-point layer, open a popup at
            // the location of the feature, with
            // description HTML from its properties.
            map.on('click', 'unclustered-point', (e) => {
                const { popUpMarkup } = e.features[0].properties;
                const coordinates = e.features[0].geometry.coordinates.slice();

                // Ensure that if the map is zoomed out such that
                // multiple copies of the feature are visible, the
                // popup appears over the copy being pointed to.
                while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
                    coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
                }

                new mapboxgl.Popup()
                    .setLngLat(coordinates)
                    .setHTML(
                        popUpMarkup)
                    .addTo(map);
            });

            map.on('mouseenter', 'clusters', () => {
                map.getCanvas().style.cursor = 'pointer';
            });
            map.on('mouseleave', 'clusters', () => {
                map.getCanvas().style.cursor = '';
            });
        });


    </script>